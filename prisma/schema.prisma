generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workspaces    Workspace[]
  memberships   Member[]
  invitedMembers Member[] @relation("MemberInvitedBy")
  templates     Template[]
  createdRooms  Room[]
  roomParticipants RoomParticipant[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members   Member[]
  templates Template[]
  rooms     Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

enum MemberRole {
  ADMIN
  EDITOR
  VIEWER
}

enum RoomStatus {
  ACTIVE
  CLOSED
  ARCHIVED
}

enum AnonymousApprovalMode {
  AUTO
  MANUAL
}

enum RoomParticipantRole {
  HOST
  COLLABORATOR
  VIEWER
  GUEST
}

enum RoomParticipantSource {
  WORKSPACE_MEMBER
  ANONYMOUS
}

model Member {
  id           String     @id @default(cuid())
  workspaceId  String
  userId       String
  invitedById  String?
  role         MemberRole @default(VIEWER)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitedBy User?     @relation("MemberInvitedBy", fields: [invitedById], references: [id], onDelete: SetNull)

  @@unique([workspaceId, userId])
  @@index([workspaceId])
  @@index([userId])
}

enum TemplateLanguage {
  JAVASCRIPT
  TYPESCRIPT
  REACT
}

model Template {
  id           String           @id @default(cuid())
  workspaceId  String
  createdById  String
  name         String
  description  String?
  hiddenDescription String?
  language     TemplateLanguage
  content      String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy User      @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@unique([workspaceId, name])
}

model Room {
  id                  String      @id @default(cuid())
  workspaceId         String
  createdById         String
  name                String
  slug                String      @unique
  status              RoomStatus  @default(ACTIVE)
  allowAnonymousView  Boolean     @default(false)
  allowAnonymousEdit  Boolean     @default(false)
  allowAnonymousJoin  Boolean     @default(false)
  requiresMemberAccount Boolean   @default(false)
  anonymousApprovalMode AnonymousApprovalMode @default(AUTO)
  maxParticipants      Int?
  code                String      @default("")
  archivedAt          DateTime?
  closedAt            DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdBy User      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  participants RoomParticipant[]
  anonymousProfiles RoomAnonymousProfile[]
  sessions RoomSession[]

  @@index([workspaceId])
  @@unique([workspaceId, name])
}

model RoomParticipant {
  id                 String                  @id @default(cuid())
  roomId             String
  userId             String?
  anonymousProfileId String?
  role               RoomParticipantRole
  source             RoomParticipantSource
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt

  room             Room                  @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user             User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  anonymousProfile RoomAnonymousProfile? @relation(fields: [anonymousProfileId], references: [id], onDelete: Cascade)
  sessions         RoomSession[]

  @@index([roomId])
  @@unique([roomId, userId])
  @@unique([roomId, anonymousProfileId])
}

model RoomAnonymousProfile {
  id         String   @id @default(cuid())
  roomId     String
  displayName String
  slugToken  String   @unique
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())

  room         Room             @relation(fields: [roomId], references: [id], onDelete: Cascade)
  participants RoomParticipant[]

  @@index([roomId])
}

model RoomSession {
  id            String   @id @default(cuid())
  roomId        String
  participantId String
  connectionId  String   @unique
  clientInfo    Json?
  connectedAt   DateTime @default(now())
  disconnectedAt DateTime?
  lastPingAt    DateTime @default(now())

  room        Room            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  participant RoomParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([participantId])
}
