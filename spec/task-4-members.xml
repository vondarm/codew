<?xml version="1.0" encoding="UTF-8"?>
<task-spec id="4" name="Управление участниками и ролями (MemberService)">
  <overview>
    <objective>Спроектировать и реализовать MemberService и связанные с ним UI/Server Actions для управления участниками workspace: приглашение по e-mail существующих пользователей, немедленное добавление в workspace с выбранной ролью admin/editor/viewer, изменение ролей, удаление и передача прав администратора.</objective>
    <in-scope>
      <item>Расширение Prisma-схемы моделью `Member` (либо аналогичной) с enum ролей и полями для связи `User`↔`Workspace`.</item>
      <item>Добавление связей User ↔ Workspace через Member, обеспечение уникальности членства и автоматическое создание участника-администратора для владельца workspace.</item>
      <item>Реализация слоя доступа к данным (репозитории) для работы с участниками workspace.</item>
      <item>Создание MemberService с контрактами inviteMember, changeRole, removeMember и бизнес-правилами (валидация ролей, единственный админ, передача владения).</item>
      <item>Server Actions/handlers для управления участниками на странице workspace.</item>
      <item>Интерфейс управления участниками на странице workspace/[id]: список действующих участников, форма приглашения существующего пользователя по email и модальные окна смены роли/удаления.</item>
      <item>Отображение и обработка ошибок/состояний (loading/success/error) в UI, уведомления после операций (успешное приглашение, отсутствие пользователя, запрет операции).</item>
      <item>Обновление документации при необходимости (описание ролей и процесса приглашения существующих пользователей).</item>
    </in-scope>
    <out-of-scope>
      <item>Интеграция с почтовыми сервисами или фактическая отправка e-mail.</item>
      <item>Реализация комнат, шаблонов или каких-либо UI вне страницы управления участниками.</item>
      <item>Расширенное логирование/аудит действий (фиксируется в отдельных задачах).</item>
    </out-of-scope>
  </overview>
  <deliverables>
    <item>Обновленный `schema.prisma` с моделью `Member`, enum ролей, связями к `User`/`Workspace` и ограничениями (`@@unique`).</item>
    <item>Миграция Prisma, создающая таблицу участников, индексы по `workspaceId`/`userId`, а также backfill для существующих рабочих областей (создание Member владельца).</item>
    <item>Набор функций доступа к данным (`src/lib/prisma/member.ts`) для CRUD операций и поиска участников по email пользователя через связь с `User`.</item>
    <item>Сервисный модуль `MemberService` (`src/lib/services/member.ts`) с реализацией inviteMember, changeRole, removeMember и кастомными ошибками.</item>
    <item>Server Actions (`src/app/workspaces/[workspaceId]/members/actions.ts` или аналог) для приглашения, изменения роли и удаления участников и их использование в UI.</item>
    <item>Секция `app/workspaces/[workspaceId]/page.tsx` с UI списком участников, формой приглашения и модальными окнами (Material UI).</item>
    <item>Тесты/проверки (минимально smoke) для основных сценариев: приглашение существующего пользователя, обработка отсутствующего пользователя, смена роли, удаление.</item>
    <item>Документация (например, `docs/members.md` или обновление README) с описанием модели, ограничений и пользовательских сценариев.</item>
  </deliverables>
  <implementation-plan>
    <step index="1">Изучить текущую Prisma схему и код WorkspaceService, определить точки интеграции (ownerId, список workspaces) и требования к связям User↔Workspace.</step>
    <step index="2">Добавить в `schema.prisma` enum ролей (`ADMIN`, `EDITOR`, `VIEWER`) и модель `Member` (поля: id, workspaceId, userId, role, invitedById, timestamps), обеспечив уникальность пары `workspaceId` + `userId`.</step>
    <step index="3">Обновить модель `Workspace` (связь `members`, каскадное удаление) и `User` (связь `memberships`) и выполнить миграцию с backfill-скриптом, создающим запись Member для каждого текущего владельца workspace.</step>
    <step index="4">Создать репозитории в `src/lib/prisma` для работы с участниками (создание, обновление, подсчет администраторов, поиск участника по email пользователя через связь `User`).</step>
    <step index="5">Реализовать `MemberService` с бизнес-логикой: валидация email (формат/наличие пользователя, проверка принадлежности к workspace), запрет приглашения существующего участника, добавление найденного пользователя с указанной ролью, changeRole (нельзя оставлять workspace без admin), removeMember (учёт удаления owner и передача владения/назначение нового admin).</step>
    <step index="6">Создать Server Actions для страницы workspace: загрузка текущих участников, вызов сервисов, `revalidatePath` для `workspace/[id]`, возврат структур состояния и сообщений об ошибках для UI.</step>
    <step index="7">Разработать клиентские компоненты UI (список участников, форма Material UI, модальные окна смены роли/удаления) и подключить к Server Actions.</step>
    <step index="8">Провести smoke-тестирование: приглашение email существующего пользователя, проверка сообщения об ошибке при отсутствии пользователя, смена роли, удаление участника (включая сценарии с администраторами).</step>
    <step index="9">Обновить документацию и добавить заметки для QA/продакшена (роли, процесс приглашения существующих пользователей, ограничения).</step>
  </implementation-plan>
  <tooling>
    <dependency>Prisma ORM и CLI для обновления схемы и миграций.</dependency>
    <dependency>NextAuth (getCurrentUser) для привязки действий к текущему пользователю и проверки прав.</dependency>
    <dependency>Утилиты для нормализации/валидации email (например, встроенные методы или `validator.js`).</dependency>
    <dependency>Material UI для реализации UI компонентов управления участниками.</dependency>
    <dependency>Zod/React Hook Form (если уже используются) для валидации и обработки форм.</dependency>
  </tooling>
  <testing>
    <strategy>Запустить `npx prisma migrate dev` (или `db push` в dev-режиме) для проверки применимости миграций и генерации клиента.</strategy>
    <strategy>Выполнить `yarn lint` и другие существующие проверки (например, `yarn test`, если есть) для подтверждения корректности нового кода.</strategy>
    <strategy>Ручной smoke-тест: приглашение email существующего пользователя, проверка отображения ошибки при неизвестном email, смена роли и удаление участника.</strategy>
    <strategy>Проверка ограничений: запрет приглашения существующего участника, невозможность удалить последнего администратора.</strategy>
  </testing>
  <documentation>
    <item>Описание схемы членства и ролей, шаги по управлению участниками в README или `docs/members.md`.</item>
    <item>Инструкции по управлению ролями и процессу приглашения существующих пользователей.</item>
  </documentation>
  <risks>
    <risk>Удаление или понижение роли администратора может оставить workspace без управляющего — необходимо жёстко проверять наличие хотя бы одного admin.</risk>
    <risk>Ошибки поиска пользователя по email (например, различия регистра или незавершённая регистрация) — требуется нормализация и понятные сообщения об ошибках.</risk>
    <risk>Конкурентные операции (несколько администраторов одновременно приглашают одного и того же пользователя) могут привести к гонкам — добавить уникальные ограничения и транзакции по необходимости.</risk>
    <risk>Существующий код, ожидающий `workspace.ownerId`, должен корректно работать после появления Members — требуется регрессионная проверка.</risk>
  </risks>
  <acceptance-criteria>
    <criterion>Администратор workspace видит полный список участников и может отправить приглашение существующему пользователю по email.</criterion>
    <criterion>Приглашение пользователя без учётной записи отображает контролируемую ошибку и не создаёт запись участника.</criterion>
    <criterion>Администратор может изменить роль участника (в пределах допустимых переходов) и удалить участника без нарушения ограничений по администраторам.</criterion>
    <criterion>UI отображает успехи/ошибки операций, документация обновлена, все проверки (линт/миграции) проходят.</criterion>
  </acceptance-criteria>
</task-spec>
