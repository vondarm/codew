<?xml version="1.0" encoding="UTF-8"?>
<task-spec id="5" name="Управление комнатами (RoomService)">
  <overview>
    <objective>Спроектировать и реализовать RoomService, модель Prisma и пользовательские интерфейсы для управления комнатами интервью в рамках рабочей области: создание, получение, обновление настроек, завершение комнаты и работа с публичной ссылкой по slug для кандидатов.</objective>
    <in-scope>
      <item>Расширение `schema.prisma` моделью `Room` с полями: `id`, `workspaceId`, `createdById`, `name`, `slug`, `status`, `allowAnonymousView`, `allowAnonymousEdit`, `allowAnonymousJoin`, `code`, `archivedAt`/`closedAt`, `createdAt`, `updatedAt`, а также enum `RoomStatus`.</item>
      <item>Определение связей `Room` ↔ `Workspace`/`Member` (внешние ключи, каскадное удаление, индексы `@@unique([workspaceId, name])` и/или `@@unique([slug])`) и миграции Prisma, создающей таблицу комнат, индексы и значения по умолчанию (например, статус `ACTIVE`, пустая строка для `code`).</item>
      <item>Создание слоя доступа к данным (`src/lib/prisma/room.ts`) с функциями `createRoomRecord`, `findRoomsByWorkspace`, `findRoomBySlug`, `updateRoomRecord`, `closeRoomRecord`, `regenerateRoomSlug`.</item>
      <item>Реализация сервисного модуля `RoomService` (`src/lib/services/room.ts`) с контрактами `createRoom`, `getRoom`, `updateRoom`, `closeRoom`, а также вспомогательными методами `listRoomsForWorkspace`, `generateUniqueSlug`, валидацией входных данных (название, уникальность slug), проверкой прав через MemberService/PermissionsMiddleware и маппингом ошибок Prisma в кастомные исключения.</item>
      <item>Генерация человеко-понятного slug (например, `https://app/rooms/[slug]`) с защитой от коллизий и возможностью регенерации slug для инвалидации прежних ссылок на комнату.</item>
      <item>Server Actions/handlers: `app/workspaces/[workspaceId]/rooms/actions.ts` для создания/обновления/закрытия комнат и `app/rooms/[roomSlug]/actions.ts` (или аналог) для обновления настроек и регенерации slug; все действия должны возвращать детализированные статусы (success/error/validation) и вызывать `revalidatePath`.</item>
      <item>Обновление серверной страницы рабочей области (`app/workspaces/[workspaceId]/page.tsx` или вложенного маршрута `rooms/page.tsx`) с секцией списка комнат: таблица/карточки, индикаторы статуса (Active/Closed/Archived), кнопки открытия, копирования ссылки на комнату, архивирования; модальное окно создания комнаты (поле «Название», переключатели прав анонимов, опциональный выбор стартового шаблона TODO).</item>
      <item>Создание страницы комнаты `app/rooms/[roomSlug]/page.tsx` с серверной загрузкой Room и клиентским компонентом настроек (копирование ссылки, переключатели прав анонимов, отображение статуса, кода и метаданных, кнопка закрытия/восстановления).</item>
      <item>Отображение ограничений доступа: пользователи без членства/прав редактора получают 403/redirect; анонимные пользователи по прямой ссылке на slug видят страницу «ожидания» (пока без редактора).</item>
      <item>Обновление документации и примеров конфигурации (например, `.env.example` для базового URL комнат, если нужно).</item>
    </in-scope>
    <out-of-scope>
      <item>Реалтайм-редактирование, Monaco Editor и yjs-интеграция (отдельная задача CollaborationService).</item>
      <item>Запуск и исполнение кода (ExecutionService).</item>
      <item>Импорт и использование шаблонов кода внутри комнаты (задача TemplateService, кроме предусмотра поля для привязки).</item>
      <item>Логирование действий, чат участников, трекинг состояния подключения.</item>
      <item>Интеграция с внешними нотификациями или email приглашениями.</item>
    </out-of-scope>
  </overview>
  <deliverables>
    <item>Обновленный `schema.prisma` с моделью `Room`, enum статусов, связями и ограничениями уникальности.</item>
    <item>Prisma-миграция, создающая таблицу `Room`, индексы, значения по умолчанию, триггер/скрипт бэкапа для существующих данных (если есть).</item>
    <item>Файл `src/lib/prisma/room.ts` с функциями доступа к данным и тестами/фиктивными генераторами.</item>
    <item>Сервисный слой `src/lib/services/room.ts` (или аналог) с реализацией контрактов, проверками прав и сериализаторами DTO для UI.</item>
    <item>Server Actions и/или Route Handlers для операций (создание, обновление настроек, закрытие, регенерация slug), подключенные к UI.</item>
    <item>Обновлённая страница рабочей области с секцией «Комнаты», модальным окном создания и действиями над комнатами.</item>
    <item>Новая страница `app/rooms/[roomSlug]/page.tsx` с компонентами настроек комнаты, состояниями загрузки/ошибок и копированием ссылки на комнату.</item>
    <item>Тесты RoomService (юнит или интеграционные), smoke-план UI (создание → отображение → изменение → закрытие) и чек-лист ручной проверки.</item>
    <item>Документация (`docs/rooms.md` или раздел README) с описанием модели, статусов, настройки анонимного доступа и сценариев использования.</item>
  </deliverables>
  <implementation-plan>
    <step index="1">Проанализировать существующую Prisma-схему (`Workspace`, `Member`, `User`) и определить необходимые поля/связи для `Room`, учесть будущие зависимости (CollaborationService, LoggingService).</step>
    <step index="2">Добавить в `schema.prisma` модель `Room` и связанные enum, уникальные индексы, значения по умолчанию; обновить связи `Workspace` (`rooms`) и `User` (`createdRooms`) при необходимости; выполнить `npx prisma migrate dev` и `prisma generate`.</step>
    <step index="3">Создать `src/lib/prisma/room.ts` с функциями CRUD/поиска, использовать транзакции для одновременного создания/регенерации slug и валидации уникальности.</step>
    <step index="4">Реализовать `RoomService`: валидация входящих DTO (Zod/TypeScript), проверка прав через MemberService/Permissions, генерация slug (slugify + nanoid), создание/обновление записей, сохранение поля `code`, логика закрытия (статус `CLOSED`, установка `closedAt`, опционально `archivedAt`).</step>
    <step index="5">Добавить функции генерации/регенерации slug и обновления `code` при сохранении состояния комнаты.</step>
    <step index="6">Реализовать Server Actions/Route Handlers для создания/обновления/закрытия комнат и регенерации slug, подключить уведомления об успехе/ошибках.</step>
    <step index="7">Обновить страницу рабочей области: загрузка списка комнат через серверный компонент, клиентский компонент списка с действиями, модальное окно создания, интеграция с Server Actions и состояниями (loading/success/error).</step>
    <step index="8">Создать страницу комнаты `app/rooms/[roomSlug]/page.tsx`: серверная загрузка, отображение метаданных и содержимого `code`, форма настроек (Material UI Switch), кнопки копирования ссылки, закрытия/восстановления, сообщения об ошибках.</step>
    <step index="9">Покрыть критичные сценарии тестами (юнит RoomService, ручной smoke UI), обновить документацию и провести ревью миграций.</step>
  </implementation-plan>
  <tooling>
    <dependency>Prisma ORM + CLI для обновления схемы, миграций и генерации клиента.</dependency>
    <dependency>NextAuth / AuthService + MemberService для получения текущего пользователя и проверки ролей.</dependency>
    <dependency>Утилиты генерации slug (например, `nanoid`, `slugify`).</dependency>
    <dependency>Material UI для таблиц, модальных окон, переключателей и кнопок.</dependency>
    <dependency>Zod или аналогичная библиотека валидации для проверок DTO в Server Actions/RoomService.</dependency>
  </tooling>
  <testing>
    <strategy>Выполнить `npx prisma migrate dev` на чистой базе для проверки применимости миграции и регенерации клиента.</strategy>
    <strategy>Запустить `yarn lint` и `yarn test` (Vitest) после добавления кода и убедиться, что все проверки проходят.</strategy>
    <strategy>Ручной smoke-тест через `yarn dev`: администратор создаёт комнату, копирует ссылку по slug, обновляет настройки (права анонимов, содержимое `code`) и закрывает комнату; проверка отображения статусов в списке.</strategy>
    <strategy>Проверка сценариев доступа: участник с ролью viewer не может изменять настройки; анонимный переход по ссылке на slug без прав редактирования видит только публичный экран ожидания.</strategy>
  </testing>
  <documentation>
    <item>Новый документ `docs/rooms.md` с описанием модели, статусов, флагов анонимного доступа, хранения поля `code` и инструкциями по использованию UI.</item>
    <item>Обновление README или существующих docs с навигацией (как попасть на страницу комнаты, где искать ссылки), а также инструкции по миграциям.</item>
    <item>Обновление `.env.example`, если вводится переменная базового URL для генерации публичной ссылки по slug.</item>
  </documentation>
  <risks>
    <risk>Коллизии slug приведут к невозможности доступа — требуется атомарная генерация и уникальные индексы.</risk>
    <risk>Ошибки в проверках прав могут открыть доступ к комнатам посторонним пользователям — обязательны проверки MemberService и тесты.</risk>
    <risk>Закрытие комнаты должно корректно блокировать будущую коллаборацию; несогласованность статуса может вызвать ошибки при последующих задачах (CollaborationService).</risk>
    <risk>Большое число комнат на workspace может требовать пагинации/поиска — предусмотреть оптимизированные запросы и индексы.</risk>
  </risks>
  <acceptance-criteria>
    <criterion>Администратор/редактор рабочей области может создать комнату с уникальным slug и настройками анонимов; запись появляется в базе и отображается в UI списка комнат.</criterion>
    <criterion>Страница комнаты по slug отображает актуальные данные, позволяет обновить флаги анонимного доступа, содержимое `code`, а также скопировать/регенерировать slug.</criterion>
    <criterion>Вызов `closeRoom` переводит комнату в статус `CLOSED`, скрывает возможности редактирования для анонимов и помечает комнату как архивированную в списке.</criterion>
    <criterion>Пользователи без прав редактирования не могут изменять настройки; анонимный доступ ограничивается экраном ожидания.</criterion>
    <criterion>Миграции, тесты и линтеры выполняются без ошибок, документация обновлена.</criterion>
  </acceptance-criteria>
</task-spec>
